#+TITLE: Notes from Road to Learn React
* Introduction to React
** Using lists
   We need a key in order to work with JS lists (list -> JSX elem) so React knows when to update the individual nodes.
** ES6
*** Functions
    #+BEGIN_SRC js
    // this a standard function:
    const sum = function(a, b) {
      return a + b
    }

    // es6 arrow function
    const sum = (a, b) => {
      return a + b
    }

    // without braces, the expr is the return
    const sum = (a, b) =>
      a + b

    // don't need parenthesis if we have one input variable
    const abs = a =>
      (a < 0)? a : -a
    #+END_SRC

*** Objects Definitions
    #+BEGIN_SRC js
    /*
     * Object in ES5 go by
     * var obj = {
     *   property: value
     * }
     */
    
    // in ES6 we can shorthand initializers like this
    const obj = {
      list: list // notice the property and value keys are the same
    }

    const obj = {
      list
    }

    // in ES6 we can shorthand functions like this
    const obj = {
      prop: function(a) {
        return a
      }
    }

    const obj = {
      prop(a) {
        return a
      }
    }

    // Can also use computed property names
    const name = 'charlie'
    const obj = {
      [name]: 'a baller' // evaluates to 'charlie' : 'a baller'
    }
    #+END_SRC

*** Object destructuring
    #+BEGIN_SRC js
    // remember in python you could do
    // (hi, python_rocks) = list_or_tuple # ?

    // you can do that with es6 now
    {hi, jsRocksToo} = obj

    // useful in functional stateless components
    const Component = (props) =>
      <div> {props.xD} </div>

    const Component = ({xD}) =>
      <div> {xd} </div>
    #+END_SRC
* Basics in React
** Button onClick
   #+BEGIN_SRC js
   // need to bind this for class functions
   constructor(props) {
     // ...
     this.onDismiss = this.onDismiss.bind(this)
   }

   // ...
   <button onClick={() => this.onDismiss(site.objectID)}
           type='button'>
     dismiss
   </button>
   // notice the react prop onClick, which takes in a function to handle an
   //  synthetic event.  We don't use it here (we just pass in objectID, but...

   // our button onClick handler, which just prunes our list.
   // NOTE: pattern: every function that sets state needs to be in the React class
   //  and binded (to use this)
   onDismiss(id) {
     let updated = this.state.list.filter(site =>
       id !== site.objectID)

     this.setState({
       list: updated
     })
   }  // remember to bind in constructor to use this
   #+END_SRC
** Client search bar
   #+BEGIN_SRC js
   // first we need to add a form
   // <App> ...
   <form>
     <input type='text'
            onChange={this.onSearchChange}
     />
   </form>
   // notice that we have the react onChange prop to pass in a function handler
   //  the function takes in an syntheic event

   // the onChange handler, which takes in a synthetic event
   onSearchChange(event) {
    this.setState({ searchTerm: event.target.value })
   }

   // be sure to to update our state to include searchTerm and bind this   
   constructor(props) {
    super(props)
    this.state = {
      list,
      searchTerm : ''
    }
    this.onDismiss = this.onDismiss.bind(this)
    this.onSearchChange = this.onSearchChange.bind(this)
   }

   // to 'search' we apply a filter to our list like this:
   // list.filter(isSearched).map(ourComponents)
   {this.state.list.filter(isSearched(this.state.searchTerm)).map(site =>
     <div key={site.objectID}>
        <h3><a href={site.url}>{site.title}</a></h3>
         <p>
           Author: {site.author}
         </p>
         {/*more data components here*/}
      </div>

   // our filter needs a filter to filter with.  We could have an internal function (bind this for state)
   // or use a higher order function (we do this :) )
   const isSearched = (searchTerm) =>
     (site) => {
       return !searchTerm.trim() || 
         site.title.toLowerCase().includes(searchTerm.toLowerCase()) ||
         site.author.toLowerCase().includes(searchTerm.toLowerCase())
   }
   // note the initial !searchTerm is to detect an empty string, so we match everything
   #+END_SRC
** Controlled components
   Certain =<html>= components have their own state, like =<form>= elements (=<input>=, =<textarea>=, =<select>=).  We want React's state to be the single source of truth, so we add an =value= prop to the =<input>= like so.

   #+BEGIN_SRC js
   <form>
    <input
      type='text'
      value={value}
      onChange={onChange}
    />
   </form>
   #+END_SRC
** Composable Components
   I know this.  You can create Components from other Components.  Kind of like calling function within a function.
** Reusable Components
   CLOSED: [2017-10-12 Thu 20:23]
   I know this.  You can reuse Components, kind of a like a library function.
** Component Declarations
   Currently there are two types of Components:
   - Functional Stateless Components
     - Don't have state within them (no =this.state=)
     - Defined as a function
     - Serves as a view component (basically the render method)
   - Class Components
     - Holds state
     - Defined as a class
     - Serves as state management
** Styling Components
   Without 3rd party libs (Styled Components), React comes with two ways to do styling: inline and imported pure CSS.

   #+BEGIN_SRC js
   // inline styling
   <h1 style={{color: 'red'}}>
     This is a RED header.
   </h1>
   #+END_SRC
   
   That's inline styling.

   #+BEGIN_SRC
   /* ex.css */
   body {
     color: #222;
     background: aquamarine;
   }

   .ayy {
     color: orange;
   }
   #+END_SRC

   Then just do:
   #+BEGIN_SRC js
   // jsx file
   import 'ex.css'
   #+END_SRC

   Some tips and tricks I learned from copy-writing Robin's CSS.
   - "Cards" are just =div= elements with a =border= and =background= color.
   - Buttons should have a =cursor=, and we can change the color by using =button:hover= tag.
   - Containers (=div=) like cards need to have a margin.
     - Padding is space inside of the border (bigger cards)
     - Margin is space outisde of the border (wider spaced cards)
     - *Vertical margins* collapse!
       - That means if two vertical margins touch each other, the values collapse into the largest value.
         - Can fix this by adding invisible padding or just something inbetween the margins
         - Ex: 2 divs, margin 30px and 20px touching.  We'd expect a space of 50px between them, but the space is 30px.
   - Flexbox is the defactor layout engine right now, at least for smaller components (Cards) in 1D.
* Getting Real with an API
** Lifecycle Methods
*** Mounting (prerender)
**** =constructor()=
     Initialize state to get off the ground or just to the loading screen.  We also bind =this= here.
**** =componentWillMount()= 
     Don't use this usually.
**** =render()=
     Think of this as a pure function.  No state should change.  Like a functional stateless component.
**** =componentDidMount()=
     *Useful*.  After the graphics are rendered (no lag), we then can make API calls to update state here.
*** Update lifecycle (after initial render, before shutdown)
**** =componentWillReceiveProps(nextProps)= 
     Used to apply different behavior when props changes (during an update lifecycle).  We can do things like changing internal state based on different props.  [Setting new state based on nextProps is the thing to do here].  Similar to the constructor, where we set state.
**** =shouldComponentUpdate(nextProps, nextState)=
     Called *every* time a component will update based on props or state.  Used for optimization (render children or nah? or disable the update lifecycle of a child).
**** =componentWillUpdate(nextProps, nextState)=
     Similar to =componentWillMount()=, don't usually use this, unless we're cleaning or doing calculations before the render().  NOTE: Can't change the state (=setState()=) anymore.  We'll use =componentWillReceiveProps()= for that.
**** =render()=
     The render part of the update lifecycle, so the graphics change.  Again, should be pure.
**** =componentDidUpdate(prevProps, prevState)=
     Similar to =componentDidMount()=, we can do API calls, update state, (or access the DOM) here.  Think asynchronous actions.
*** Unmount
**** =componentWillUnmount()=
     Bascially the deconstructor.  Think C++ delete.  Free resources (that the garbage collector doesn't immediately touch) and such.  Unsubscribing remote connections makes sense here.

** Fetching Data

   To fetch data, we use the =fetch()= method, brought in 2015 to replace AJAX requests (see [[https://davidwalsh.name/fetch][here]] for history and basic usage).

   Basically, we can =fetch()= an URI, like an API request, and it'll return a =Promise=, when we can call functions on to do stuff asynchronously with the data.

   #+BEGIN_SRC js
   // fetch Hacker News stories from Algolia
   function fetchTopSearchStories(searchTerm) {
     fetch(getUri(searchTerm) // simple string interpolation for https://...
       .then(response => response.json()) // returns a Request object
       .then(result => this.setData(result))
       .catch(e => e)

   /* notice the functions act as a dataflow on the async. callback from the
    * fetch.
    * also: you can pass headers and other params? in the fetch request.
    */
   #+END_SRC

   Note: call these async loaders in the =componentDidMount()= state, which is right after the initial UI loads.  That way the user can see a loading state and the UI is snappy.

*** String Interpolation
    Quick aside:

    #+BEGIN_SRC js
    const jsVar = 'three'
    const is_in = 'one'
    const here = 'two'

    string = `{${jsVar} = ${is_in} + ${here}}`
    // string is 'three = one + two'
    #+END_SRC

** ES6 Spread Operators (Copying Objects)

   Spread operators is basically unpacking arrays or objects (state 3 proposal es6).  Like the python =*= syntax.

   There's quick hack we can use object spread operators to make a 1st level deep copy.

   #+BEGIN_SRC js
   // ES5 Object Copying [1 level deep]
   this.setState({
     result: Object.assign({}, this.state.result, { hits: updatedHits}) 
   })
   /* From MDN:
    * Object.assign(target, ...sources)
    * Properties in the target object will be overwritten by properties in the sources if they have the same key. 
    * Later sources' properties will similarly overwrite earlier ones.  
    */

    // ES6 Spread Syntax Object Copying [1 level deep]
    this.setState({
      result: { ...this.state.result, hits: updatedHits }
    })
    /* Notice how the new result takes the unpacked properties of the old result (...this.state.result),
     * and then takes a property with the same over which overrides it's old property in the list.
     * This way, we get a new copy of state without altering the old state.
     */
   #+END_SRC

** Conditional Rendering

   React is just Javascript.  So we can do a simple =if else= statement to render components based on a boolean value.

   Note React will render *nothing at all* if you return a bool (True, False, null) in the =render()=

   To look fancier, we can use the ternary syntax from C: =bool? doThisIfTrue : doThisIfFalse=.

   #+BEGIN_SRC js
   // two different methods

   // in a render() method of a component ...
   {if (this.state.loaded) {
     return <CoolData>
   } else return <p> Loading ... </p>}

   {this.state.loaded? <CoolData> : <p> Loading ... </p>
   #+END_SRC

   In React, we can use conditional rendering to show different components based on state (so a loading screen when data isn't there yet).

** Client or Server Side Search

   On the client side, we can manipulate the state returned from the Algolia API with the filter.  This is named 'client side search'.  However, we want to use the search bar to get new state from Algolia.  That's 'server side search', since we're querying Algolia.

   To do that, we can retool the search bar for server side search.  We're going to add a button to our search bar, and connect the search function to the =<form onSubmit={fn}>=.  Note that by doing so, we drop the filter client side search entirely.

   HTML forms work a bit differently in React since we wanted a single source of state (see [[https://reactjs.org/docs/forms.html][the React Documentation on Forms]].).  That means for server side search, we can include a ="submit"= button in the form and query when we do.  We can also do debouncing, a technique that waits for the user to stop typing before firing off an API request.  [[https://levelup.gitconnected.com/debounce-in-javascript-improve-your-applications-performance-5b01855e086][Gitconnected explains here.]]  That's kind of hard, so we're gonna go with a simple =submit= button.

   #+BEGIN_SRC js
   /* Basically, we attach an onSubmit() prop to the form and type the button as
    * a submit button.  In this case, we make another API call based on the
    * searchTerm, which just repeats the function in componentDidMount().
    */


   // in <Search> ...
   const Search = ({children, value, onChange, onSubmit}) => {
     return (
       <form onSubmit={onSubmit}> {/* fetch the API call onSubmit */}
         <input
           value={value} {/* match the React state, which is searchTerm */}
           onChange={onChange} {/* update the React state on every change */}
         />
         <button type="submit">
           {children}
         </button>
       </form>
     )
   }

   // in <App> ...
   constructor(props) {
     // ...
     // remember to bind this
     this.onSearchSubmit = this.onSearchSubmit.bind(this)
   }
   
   onSearchSubmit(event) {
     event.preventDefault() // on normal form submits, the webpage does a refresh
     // causing us to reset the state (back to a redux searchTerm)

     {searchTerm} = this.state
     this.fetchTopStories(searchTerm)
   }
   render() {
     // ...
     <Search
       value={this.state.searchTerm}
       onChange={this.onSearchChange}
       onSubmit={this.onSearchSubmit}
     >
       Search
     </Search>
   }
   #+END_SRC

** Paginated Fetch (API changes, adding a 'More' button)
   How do we get the entire search results set from the HN Algolia API?.  To do that, we notice that the API returns an =nbHits=, =hitsPerPage= and =page= parameter, lets us grab more results.  We can mirror that functionality within our app.

   First, we add the params to our HTTP API call.
   #+BEGIN_SRC js
   const BASE_PATH = 'https://hn.algolia.com/api/v1'
   const PATH_SEARCH = '/search'
   const QUERY_PARAM = 'query'
   const PAGE_PARAM = 'page'
   const HPP_PARAM = 'hitsPerPage'

   const generateUrl = (searchTerm, page) =>
     `${BASE_PATH}${PATH_SEARCH}?${QUERY_PARAM}=${searchTerm}&\
${PAGE_PARAM}=${page}&${HPP_PARAM}=${DEFAULT_HPP}`
   #+END_SRC

   The initial page is page 0, and we need a page state for our current  =searchTerm=.

   #+BEGIN_SRC js
   // In <App> ...
   constructor(props) {
     super(props)
     this.state = {
       searchTerm : 'redux',
       result: null, // now result has a page state to check on the current page
     }
   }
   #+END_SRC

   We fetch data in =fetchSearchTopStories()=, so we'll add an *default parameter* like so:

   #+BEGIN_SRC js
   // In <App> ...
   fetchSearchTopStories(searchTerm, page = 0) {
     fetch(...)
   }  // now page will default to 0, just like Python or C++
   #+END_SRC

   Now to move onto the next page, we can add a =More= button, calling =fetchSearchTopStories(searchTerm, page+1)=.

   #+BEGIN_SRC js
   // In <App>'s render() ...
   { searchTerm, page } = this.state

   // ...
   <Button 
     onClick={() => this.fetchSearchTopStories(searchTerm, page+1)}
   >
     More        
   </Button>
   #+END_SRC

   Note that we need to change our =result= state to include the new page.  We set the result in =setSearchTopStories()=, so we can use the spread operator to unpack the old results and update to the new results.

   #+BEGIN_SRC js
   setSearchTopStories(result) {
   const { hits, page } = result;
   const oldHits = page !== 0
     ? this.state.result.hits
     : [];
   const updatedHits = [
     ...oldHits,
     ...hits
   ];
   this.setState({
     result: { hits: updatedHits, page }
   });
   #+END_SRC
   
** Client Cache

   The key here is to separate the API fetch with what the current =searchTerm= or =searchKey=.  I conflated the two and ran into some problems implementing this by myself.

*** Make the visual state purely dependent on the searchKey

    The idea here is for the =<Table>= component to display results *only* on based on =searchKey=.  That means anytime we =setState({searchKey})=, we see somthing different.  That way, we can store old =result= calls from Algolia, and use searchKey as a key into the hashmap.  That means we turn a single =result= into multiple =results=.

    #+BEGIN_SRC js
    // in <App> ...
    constructor(props) {
      super(props)
      this.state = {
        results: null,
        searchTerm: 'redux',
        searchKey: '',
      }
    } /* NOTE: the page state gets put within the results[searchKey] object */
    #+END_SRC

    When do we change the visual state?  In the search bar, when we first load, the =more= button, and the =dismiss= button.

    In particular let's focus on the initial load and the search bar.

    Notice that both the initial state (=componentDidMount()=) and the search bar =onSearchSubmit()= both call =fetchSearchTopStories()=, which calls =setSearchTopStories()=.  We might be tempted to go straight to the source and refactor =setSearchTopStories= to create the cache (=results=), check for updates, and all that.

    Don't do that.  (I did that and ran into state troubles).  That's overloading the function.  We should first tie the visual state to =searchKey=.

    #+BEGIN_SRC js
    // in <App>'s render() ...
    render() {
      const hits = (results && results[searchKey] && results[searchKey].hits) ||
                   []
      /* Notice the use of logical shortcircuiting to see if results cache isn't
       * null, then the individual result (results[searchKey]), and then we grab
       * the hits.  We shortcircuit to an empty list if any of them are null or
       * undefined (Javascript... empty arrays are True cause they objects...)
       */

      // ...
      <Table list={hits} /* ... */ />
    #+END_SRC

    Now anytime we set state on =searchKey=, the table will change.

*** Accessing state for =componentDidMount()= and =onSearchSubmit()=

    Now, we can just call =setState({searchKey})= for each of the entry functions (We could put that into the =setSearchTopStores()= to be honest, but Robin didn't do that... ).

    #+BEGIN_SRC js
    componentDidMount() {
      const { searchTerm } = this.state;
      this.setState({ searchKey: searchTerm });
      this.fetchSearchTopStories(searchTerm);
    }
    onSearchSubmit(event) {
      const { searchTerm } = this.state;
      this.setState({ searchKey: searchTerm });
      this.fetchSearchTopStories(searchTerm);
      event.preventDefault();
    }
    #+END_SRC

*** Updating =setSearchTopStories()=, or updating the state to store multiple results
    
    Now that our state is a multiple object hash, we need to update how we =setState()= on it, which is primarily in =setSearchTopStories()=.  Notice the usage of shortcircuiting again to deal with nonexistent objects (Swift pls), and the dynamic object names.  Thanks ES6.

    #+BEGIN_SRC js
    setSearchTopStories(result) {
      const { hits, page } = result // from the API
      const { searchKey, results } = this.state

      const oldHits = results && results[searchKey]
        ? results[searchKey].hits
        : []
                   
      const updatedHits = [
        ...oldHits,
        ...hits
      ]
   
      this.setState({
        results: {
          ...results,
          [searchKey] : {hits: updatedHits, page},
        },
        searchKey
      })
    }
    #+END_SRC

*** Updating =onDismiss()= and the =More= button
    
    For the more button, we don't need to do anything, because =fetchSearchTopStories()= calls the updated =setSearchTopStories()=, which works just fine.  Notice by separating state based on searchKey, the other functions don't need much refactoring. 

    The =dismiss= button needs to access the new =states= object.
    
    #+BEGIN_SRC js
    onDismiss(id) {
      const { searchKey, results } = this.state
      const { hits, page } = results[searchKey]
      const updatedHits = hits.filter((item) => {
        return item.objectID !== id
      })

      this.setState({
        results: {
          ...results,
          [searchKey]: { hits: updatedHits, page},
        }
      })
    }
    #+END_SRC
   
*** Cross Origin Resource Sharing
    I had to deal with stupid error because I put a ='cors'= tag in the fetch HTTP header.  Don't do that.  Also, CORS headers is set from the *server side*, not client side.  Don't touch the fetch HTTP headers for now.

** Error Handling

   We can display errors in the fetch before the loading segment.

   #+BEGIN_SRC js
   fetchSearchTopStories(searchTerm, page=0) {
     fetch(generateUrl(searchTerm, page))
     .then(response => {
       return response.json()
     })
     .then(result => this.setSearchTopStories(result))
     .catch(e => {
       console.log('error:', e)
       this.setState({ error: e.message })
     })
   }

   // then just display
   render() {
     return (
      // ...
      error ? <p>{error}</p>
            : // ...
     )
   }
   #+END_SRC

* Code Organization and Testing
** ES6 Modules: Import and Export
